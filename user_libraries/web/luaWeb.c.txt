/*
**
**  File: luaWeb.c
**  Copyright Onyx Engineering Inc.
**  This file is licensed MIT
**
**
**
**
*/

#include <ctype.h>
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <assert.h>
#include <unistd.h>






#include "lua.h"

#include "lauxlib.h"

#include "mongoose.h"

#include "luaWeb.h"
#include "file_upload.h"


#define MAX_POST_DATA        16000
#define MAX_OPTIONS           32
#define OPTION_STRING_LENGTH  64

                           

void *web_return_code;
enum mg_event ref_event;
struct mg_context *ctx = NULL;
struct mg_connection *connection = NULL;
struct mg_request_info *info;
lua_State *interfaceState;


static int option_number = 0;

static char option_array[MAX_OPTIONS][OPTION_STRING_LENGTH];
static char *option_pointer_array[MAX_OPTIONS+1]; // MAX_OPTIONS+1 has null terminator in max case

static void  store_option( char *key, char *value);

extern void lua_lock( lua_State *L );
extern void lua_unlock( lua_State *L );


void *lua_callbackHandler( enum mg_event        my_event,
                          struct mg_connection *my_connection,
                          const struct mg_request_info *my_info )
{




  
  web_return_code  = NULL;
  if ( my_event == MG_NEW_REQUEST )
  {
    lua_lock( interfaceState );
    connection = my_connection;
    info = (struct mg_request_info*) my_info;
    ref_event = my_event;
  
 


    //  find string
    //  find lua function
    //  execute lua func lua_lock( interfaceState ); 

    lua_getglobal( interfaceState,"web_access");

    if( lua_pcall(interfaceState,0,0,0 ) != 0 )
    {
       printf("Lua Web Error --> %s \r\n",lua_tostring(interfaceState,-1));
    }
  
    lua_gc (interfaceState,LUA_GCCOLLECT, 0);
    lua_unlock( interfaceState ); 
  }
  return web_return_code;
  
}

static int lua_store_return_code( lua_State *L )
{
   web_return_code = (void *)lua_topointer (L, 1);
   return 0;
}

static int lua_web_init( lua_State *L )
{
 
   ctx = NULL;
   option_number = 0;
   memset( option_array,0,sizeof(option_array));
   memset( option_pointer_array,0,sizeof(option_pointer_array));
   interfaceState = L;
   return 0;
}



int lua_start( lua_State *L  )
{
   

   ctx = mg_start(lua_callbackHandler,(const char **)option_pointer_array);
   assert(ctx != NULL);
  
   return 0;
}

int lua_stop( lua_State *L )
{
  mg_stop( ctx );
  lua_web_init( L );
  return 0;
}

static int lua_option( lua_State *L )
{  
  
   char *value;
   char *key;

   key  =  ( char *)lua_tostring(L,1);
   value = ( char *)lua_tostring(L,2);
   store_option(key,value);
   
   return 0;
}
 


static int lua_getVarQueryString( lua_State *L )
{
   int returnValue;
   int buffer_len;
   char *buffer;
   char *name;

   name = (char *)lua_tostring(L,1);
   buffer_len = strlen(info->query_string)+1;
   
 
   buffer = malloc( buffer_len );
   assert(buffer != NULL );
   memset(buffer,0,buffer_len);   
   returnValue =  mg_get_var( info->query_string, 
                              strlen(info->query_string),
                              name, 
                              buffer,
                              buffer_len );
   lua_pushinteger(L,returnValue);
   lua_pushstring(L,buffer);
   free(buffer);
   return 2;
}

static int lua_getVarBufferString ( lua_State *L )
{
   int returnValue;
   char *name;
   int  length;
   char *buffer;
   int  returnLength;
   char *returnBuffer;
    
   name           = (char *)lua_tostring(L,1);
   length         = lua_tointeger(L,2 );
   buffer        = (char *)lua_topointer(L,3);
   returnLength  = lua_tointeger(L,4);
   returnBuffer = malloc( returnLength );
   assert(returnBuffer != NULL );
   memset(returnBuffer,0,returnLength);   

   
 
  
   returnValue =  mg_get_var( buffer, 
                              length,
                              name, 
                              returnBuffer,
                              returnLength );

   lua_pushinteger(L,returnValue);
   lua_pushstring(L,returnBuffer);
   free(returnBuffer);
   return 2;
}


  
static int lua_getEvent( lua_State *L )
{

   lua_pushinteger(L,ref_event);
   return 1;
}

static int lua_storeResponse( lua_State *L )
{
  int returnCode;

  returnCode = lua_tointeger(L,1);
  if( returnCode == 0 )
  {
 
     web_return_code = NULL;
  }
  else
  {
    web_return_code = (void *) 1; // not a null value
  }
  return 0;
}

static int lua_get_post_data( lua_State *L )
{
    int  returnLength;
    int  length;
    void *buf;
    buf = (void *)lua_topointer(L,1);
    length = lua_tointeger(L,2);
    returnLength =  mg_read(connection,buf,length );
    lua_pushinteger(L,returnLength);
    return 1;
} 

static int lua_getRequestMethod( lua_State *L )
{
  lua_pushstring(L, (char *)info->request_method );
  return 1; 
}

static int lua_getUri( lua_State *L )
{
  lua_pushstring(L , info->uri );
  return 1;
}

static int lua_getQueryString( lua_State *L )
{
  lua_pushstring(L, info->query_string );
  return 1;
}



static int lua_getRemoteAddress( lua_State *L )
{
   lua_pushinteger(L , info->remote_ip );
   return 1;
}


static int lua_getRemotePort( lua_State *L )
{

   lua_pushinteger(L, info->remote_port);
   return 1;
}

static int lua_get_status_code( lua_State *L )
{
  lua_pushinteger(L, info->status_code );
  return 1;
}

static int lua_get_ssl_flag( lua_State *L )
{
  lua_pushinteger(L,info->is_ssl );
  return 1;
}


static int lua_get_header_number( lua_State *L )
{
   lua_pushinteger(L, info->num_headers);
   return 1;
}

static int lua_list_header_index( lua_State *L )
{
   int index;
   
   index = lua_tointeger(L,1);
   if( index < info->num_headers)
   {
     lua_pushstring(L,info->http_headers[index].name);
     lua_pushstring(L,info->http_headers[index].value);
   }
   else
   {
     lua_pushnil (L);
     lua_pushnil (L);
  }
  return 2;
}


static int lua_get_header_value( lua_State *L )
{
   char *headerName;
   char *returnValue;

   headerName = (char *)lua_tostring(L, 1);
   returnValue = (char *)mg_get_header( connection, headerName);
   lua_pushstring(L, returnValue );

   return 1;
}


static int lua_get_http_version( lua_State *L )
{
  lua_pushstring( L, info->http_version);
  return 1;
}

static int lua_get_remote_user( lua_State *L )
{
  lua_pushstring( L,info->remote_user );
  return 1;
}


static int lua_print( lua_State *L )    

{
   char *luaString;

   luaString = (char *)lua_tostring(L,1);
   mg_printf(connection, "%s \n",  luaString );
  return 0;
}


static int lua_web_dump( lua_State *L )
{
  char *luaString;
  size_t    luaLength;
  
  luaString = (char *)lua_tolstring ( L, 1, &luaLength );
  mg_write(connection, luaString, luaLength);  
  return 0;
}

static int lua_editPassWord( lua_State *L )
{
   char *fileName;
   char *domain;
   char *user;
   char *password;
   int  returnValue;

   fileName = (char *)lua_tostring(L,1);
   domain   = (char *)lua_tostring(L,2);
   user     = (char *)lua_tostring(L,3);
   password = (char *)lua_tostring(L,4);
 
   returnValue =  mg_modify_passwords_file( ctx,fileName, user, password ); 


   lua_pushinteger(L, returnValue );
   return 1;
}

static int  lua_get_cookie( lua_State *L )
{
   const char *cookieName;
   int  cookieLength;
   int  bufferLength;
   char  *buffer;

   cookieName   = lua_tostring(L,1);
   bufferLength = lua_tointeger(L,2);
   buffer = malloc( bufferLength );
   assert( buffer != NULL );
   cookieLength = mg_get_cookie(connection, cookieName,buffer, (size_t) bufferLength);
   if( cookieLength > 0 )
   {
      lua_pushlstring (L, buffer, cookieLength);
   }
   else
   {
     lua_pushnil(L);
   }
   free(buffer);
   return 1;
}

static int lua_fileUpload( lua_State *L )
{
   char *fileName;
   int  errorflag;
   int length;
   char *data;
   char *directory;

   length = lua_tointeger(L,1);
   data   = (char *)lua_tostring(L,2);
   directory = (char *)lua_tostring(L,3);

   fileName = file_upload( &errorflag, length, data, directory);
   lua_pushinteger(L,errorflag );
   lua_pushstring(L,fileName);
   return 2;
}

static int description( lua_State *L )
{
  lua_pushstring(L,"provides lua interface to mongoose web server");
  return 1;
}


static int lua_help( lua_State *L )
{
  printf("\nhttpInterface commands \n");
  printf("init()            initialize web server data structures \n");
  printf("start()           starts the web server and returns handle \n");   
  printf( "stop( )    stops the web server \n");
  printf( "registerUri( uri, luaFunctionName \n");
  printf("setOption( key,value)   help function for specific lua functions \n");
  printf("getVarBufferString(name,length,buffer,length,returnLength)  Name from arbitary buffer  \n");  
  printf("getVarQueryString( variable )       ----     \n");
  printf("getVar(variable,length,buffer)          ---      \n");
  printf("getRequestMethod()   -- gets request method \n");
  printf("getUri()             -- gets URI            \n");
  printf("getQueryString()     -- gets Query String   \n");
  printf("getPostData(buffer,length)        -- gets post data      \n");
  printf("getRemoteAddress()   -- returns remote address as int \n");
  printf("getRemotePort()      -- gets remote port \n");
  printf("getUser()            ---gets authenicated User \n");
  printf("getHeader( headerName )    returns value for header string \n");  
  printf("getCookie( cookieName, cookieLength) \n");
  printf("file_upload( dataLength, dataBuffer, directory) \n");  
  printf("httpVersion()  ----     \n");
  printf("print( string ) ----    \n");
  printf("dump(string) ---     same as web print    \n");
  printf("editPassword( fileName,user, password ) \n" );
  printf("help()            displays api commands \n\n");
  return 0;
}


static const struct luaL_reg webFunctions[] =
{
   { "init",              lua_web_init          },
   { "start",             lua_start             },
   { "stop",              lua_stop              },
   { "setOption",         lua_option            },
 
   // user functions for dynamic handlers  
   {"getVarQueryString",    lua_getVarQueryString },
   {"getVarBufferString",   lua_getVarBufferString  },
   {"getEventCode",         lua_getEvent          },
   {"storeResponseCode",    lua_storeResponse     },
   {"getPostData",          lua_get_post_data     },
   {"storeReturnCode",      lua_store_return_code },
   // lua interface to mg_request_info structure
   {"getRequestMethod",     lua_getRequestMethod  },
   {"getUri",               lua_getUri           },
   {"getHttpVersion",       lua_get_http_version  },
   {"getQueryString",       lua_getQueryString  },
   {"getRemoteUser",        lua_get_remote_user   },
   {"getRemoteAddress",     lua_getRemoteAddress },
   {"getRemotePort",        lua_getRemotePort    },
   {"getStatusCode",        lua_get_status_code    },
   {"getSSLFlag",           lua_get_ssl_flag       },
   {"getHeaderNumber",      lua_get_header_number },
   {"getHeaderIndex",       lua_list_header_index },
   {"getHeader",            lua_get_header_value  },
   {"getCookie",            lua_get_cookie        },             
   { "file_upload",         lua_fileUpload        },
   // interface to output functions
   { "print",               lua_print },
   { "dump",                lua_web_dump },
   // generate web pass word .httpd files  elementary function
   { "editPassword",        lua_editPassWord },
   { "help",                lua_help },
   { "description",         description },
   { NULL, NULL }
};



int lua_webRegister( lua_State *L )
{
    /*
    **
    ** Creating parallel threads
    **
    **
    */
    luaL_openlib(L,"web",webFunctions,0 );
    
  
    return 1;
}

static void store_option( char *key, char *value )
{
  assert( option_number < MAX_OPTIONS );
  strcpy( &option_array[option_number][0] , key);
  option_pointer_array[option_number ] = &option_array[option_number][0];
  option_number += 1;
  assert( option_number < MAX_OPTIONS );
  strcpy( &option_array[option_number][0] , value);
  option_pointer_array[option_number ] = &option_array[option_number][0];
  option_number += 1;


}


#if 0
This is cookie stuff
/*
 * This file is part of the Mongoose project, http://code.google.com/p/mongoose
 * It implements an online chat server. For more details,
 * see the documentation on the project web site.
 * To test the application,
 *  1. type "make" in the directory where this file lives
 *  2. point your browser to http://127.0.0.1:8081
 *
 * NOTE(lsm): this file follows Google style, not BSD style as the rest of
 * Mongoose code.
 */

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include <time.h>
#include <stdarg.h>
#include <pthread.h>

#include "mongoose.h"

#define MAX_USER_LEN  20
#define MAX_MESSAGE_LEN  100
#define MAX_MESSAGES 5
#define MAX_SESSIONS 2
#define SESSION_TTL 120

static const char *authorize_url = "/authorize";
static const char *login_url = "/login.html";
static const char *ajax_reply_start =
  "HTTP/1.1 200 OK\r\n"
  "Cache: no-cache\r\n"
  "Content-Type: application/x-javascript\r\n"
  "\r\n";

// Describes single message sent to a chat. If user is empty (0 length),
// the message is then originated from the server itself.
struct message {
  long id;                     // Message ID
  char user[MAX_USER_LEN];     // User that have sent the message
  char text[MAX_MESSAGE_LEN];  // Message text
  time_t timestamp;            // Message timestamp, UTC
};

// Describes web session.
struct session {
  char session_id[33];      // Session ID, must be unique
  char random[20];          // Random data used for extra user validation
  char user[MAX_USER_LEN];  // Authenticated user
  time_t expire;            // Expiration timestamp, UTC
};

static struct message messages[MAX_MESSAGES];  // Ringbuffer for messages
static struct session sessions[MAX_SESSIONS];  // Current sessions
static long last_message_id;

// Protects messages, sessions, last_message_id
static pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER;

// Get session object for the connection. Caller must hold the lock.
static struct session *get_session(const struct mg_connection *conn) {
  int i;
  char session_id[33];
  time_t now = time(NULL);
  mg_get_cookie(conn, "session", session_id, sizeof(session_id));
  for (i = 0; i < MAX_SESSIONS; i++) {
    if (sessions[i].expire != 0 &&
        sessions[i].expire > now &&
        strcmp(sessions[i].session_id, session_id) == 0) {
      break;
    }
  }
  return i == MAX_SESSIONS ? NULL : &sessions[i];
}

static void get_qsvar(const struct mg_request_info *request_info,
                      const char *name, char *dst, size_t dst_len) {
  const char *qs = request_info->query_string;
  mg_get_var(qs, strlen(qs == NULL ? "" : qs), name, dst, dst_len);
}

// Get a get of messages with IDs greater than last_id and transform them
// into a JSON string. Return that string to the caller. The string is
// dynamically allocated, caller must free it. If there are no messages,
// NULL is returned.
static char *messages_to_json(long last_id) {
  const struct message *message;
  int max_msgs, len;
  char buf[sizeof(messages)];  // Large enough to hold all messages

  // Read-lock the ringbuffer. Loop over all messages, making a JSON string.
  pthread_rwlock_rdlock(&rwlock);
  len = 0;
  max_msgs = sizeof(messages) / sizeof(messages[0]);
  // If client is too far behind, return all messages.
  if (last_message_id - last_id > max_msgs) {
    last_id = last_message_id - max_msgs;
  }
  for (; last_id < last_message_id; last_id++) {
    message = &messages[last_id % max_msgs];
    if (message->timestamp == 0) {
      break;
    }
    // buf is allocated on stack and hopefully is large enough to hold all
    // messages (it may be too small if the ringbuffer is full and all
    // messages are large. in this case asserts will trigger).
    len += snprintf(buf + len, sizeof(buf) - len,
        "{user: '%s', text: '%s', timestamp: %lu, id: %lu},",
        message->user, message->text, message->timestamp, message->id);
    assert(len > 0);
    assert((size_t) len < sizeof(buf));
  }
  pthread_rwlock_unlock(&rwlock);

  return len == 0 ? NULL : strdup(buf);
}

// If "callback" param is present in query string, this is JSONP call.
// Return 1 in this case, or 0 if "callback" is not specified.
// Wrap an output in Javascript function call.
static int handle_jsonp(struct mg_connection *conn,
                        const struct mg_request_info *request_info) {
  char cb[64];

  get_qsvar(request_info, "callback", cb, sizeof(cb));
  if (cb[0] != '\0') {
    mg_printf(conn, "%s(", cb);
  }
 
  return cb[0] == '\0' ? 0 : 1;
}

// A handler for the /ajax/get_messages endpoint.
// Return a list of messages with ID greater than requested.
static void ajax_get_messages(struct mg_connection *conn,
                              const struct mg_request_info *request_info) {
  char last_id[32], *json;
  int is_jsonp;

  mg_printf(conn, "%s", ajax_reply_start);
  is_jsonp = handle_jsonp(conn, request_info);

  get_qsvar(request_info, "last_id", last_id, sizeof(last_id));
  if ((json = messages_to_json(strtoul(last_id, NULL, 10))) != NULL) {
    mg_printf(conn, "[%s]", json);
    free(json);
  }

  if (is_jsonp) {
    mg_printf(conn, "%s", ")");
  }
}

// Allocate new message. Caller must hold the lock.
static struct message *new_message(void) {
  static int size = sizeof(messages) / sizeof(messages[0]);
  struct message *message = &messages[last_message_id % size];
  message->id = last_message_id++;
  message->timestamp = time(0);
  return message;
}

static void my_strlcpy(char *dst, const char *src, size_t len) {
  strncpy(dst, src, len);
  dst[len - 1] = '\0';
}

// A handler for the /ajax/send_message endpoint.
static void ajax_send_message(struct mg_connection *conn,
                              const struct mg_request_info *request_info) {
  struct message *message;
  struct session *session;
  char text[sizeof(message->text) - 1];
  int is_jsonp;

  mg_printf(conn, "%s", ajax_reply_start);
  is_jsonp = handle_jsonp(conn, request_info);

  get_qsvar(request_info, "text", text, sizeof(text));
  if (text[0] != '\0') {
    // We have a message to store. Write-lock the ringbuffer,
    // grab the next message and copy data into it.
    pthread_rwlock_wrlock(&rwlock);
    message = new_message();
    // TODO(lsm): JSON-encode all text strings
    session = get_session(conn);
    assert(session != NULL);
    my_strlcpy(message->text, text, sizeof(text));
    my_strlcpy(message->user, session->user, sizeof(message->user));
    pthread_rwlock_unlock(&rwlock);
  }

  mg_printf(conn, "%s", text[0] == '\0' ? "false" : "true");

  if (is_jsonp) {
    mg_printf(conn, "%s", ")");
  }
}

// Redirect user to the login form. In the cookie, store the original URL
// we came from, so that after the authorization we could redirect back.
static void redirect_to_login(struct mg_connection *conn,
                              const struct mg_request_info *request_info) {
  const char *host;

  host = mg_get_header(conn, "Host");
  mg_printf(conn, "HTTP/1.1 302 Found\r\n"
      "Set-Cookie: original_url=%s://%s%s\r\n"
      "Location: %s\r\n\r\n",
      request_info->is_ssl ? "https" : "http",
      host ? host : "127.0.0.1",
      request_info->uri,
      login_url);
}

// Return 1 if username/password is allowed, 0 otherwise.
static int check_password(const char *user, const char *password) {
  // In production environment we should ask an authentication system
  // to authenticate the user.
  // Here however we do trivial check that user and password are not empty
  return (user[0] && password[0]);
}

// Allocate new session object
static struct session *new_session(void) {
  int i;
  time_t now = time(NULL);
  pthread_rwlock_wrlock(&rwlock);
  for (i = 0; i < MAX_SESSIONS; i++) {
    if (sessions[i].expire == 0 || sessions[i].expire < now) {
      sessions[i].expire = time(0) + SESSION_TTL;
      break;
    }
  }
  pthread_rwlock_unlock(&rwlock);
  return i == MAX_SESSIONS ? NULL : &sessions[i];
}

// Generate session ID. buf must be 33 bytes in size.
static void generate_session_id(char *buf, const char *random,
    const char *user, const struct mg_request_info *request_info) {
  char remote_ip[20], remote_port[20];
  snprintf(remote_ip, sizeof(remote_ip), "%ld", request_info->remote_ip);
  snprintf(remote_port, sizeof(remote_port), "%d", request_info->remote_port);
  mg_md5(buf, random, user, remote_port, remote_ip, NULL);
}

static void send_server_message(const char *fmt, ...) {
  va_list ap;
  struct message *message;

  pthread_rwlock_wrlock(&rwlock);
  message = new_message();
  message->user[0] = '\0';  // Empty user indicates server message
  va_start(ap, fmt);
  vsnprintf(message->text, sizeof(message->text), fmt, ap);
  va_end(ap);

  pthread_rwlock_unlock(&rwlock);
}

// A handler for the /authorize endpoint.
// Login page form sends user name and password to this endpoint.
static void authorize(struct mg_connection *conn,
                      const struct mg_request_info *request_info) {
  char user[MAX_USER_LEN], password[MAX_USER_LEN], original_url[200];
  struct session *session;

  // Fetch user name and password.
  get_qsvar(request_info, "user", user, sizeof(user));
  get_qsvar(request_info, "password", password, sizeof(password));
  mg_get_cookie(conn, "original_url", original_url, sizeof(original_url));

  if (check_password(user, password) && (session = new_session()) != NULL) {
    // Authentication success:
    //   1. create new session
    //   2. set session ID token in the cookie
    //   3. remove original_url from the cookie - not needed anymore
    //   4. redirect client back to the original URL
    //
    // The most secure way is to stay HTTPS all the time. However, just to
    // show the technique, we redirect to HTTP after the successful
    // authentication. The danger of doing this is that session cookie can
    // be stolen and an attacker may impersonate the user.
    // Secure application must use HTTPS all the time.
    my_strlcpy(session->user, user, sizeof(session->user));
    snprintf(session->random, sizeof(session->random), "%d", rand());
    generate_session_id(session->session_id, session->random,
                        session->user, request_info);
    send_server_message("<%s> joined", session->user);
    mg_printf(conn, "HTTP/1.1 302 Found\r\n"
        "Set-Cookie: session=%s; max-age=3600; http-only\r\n"  // Session ID
        "Set-Cookie: user=%s\r\n"  // Set user, needed by Javascript code
        "Set-Cookie: original_url=/; max-age=0\r\n"  // Delete original_url
        "Location: %s\r\n\r\n",
        session->session_id,
        session->user,
        original_url[0] == '\0' ? "/" : original_url);
  } else {
    // Authentication failure, redirect to login.
    redirect_to_login(conn, request_info);
  }
}

// Return 1 if request is authorized, 0 otherwise.
static int is_authorized(const struct mg_connection *conn,
                         const struct mg_request_info *request_info) {
  struct session *session;
  char valid_id[33];
  int authorized = 0;

  pthread_rwlock_rdlock(&rwlock);
  if ((session = get_session(conn)) != NULL) {
    generate_session_id(valid_id, session->random, session->user, request_info);
    if (strcmp(valid_id, session->session_id) == 0) {
      session->expire = time(0) + SESSION_TTL;
      authorized = 1;
    }
  }
  printf("session: %p\n", session);
  pthread_rwlock_unlock(&rwlock);

  return authorized;
}

// Return 1 if authorization is required for requested URL, 0 otherwise.
static int must_authorize(const struct mg_request_info *request_info) {
  return (strcmp(request_info->uri, login_url) != 0 &&
          strcmp(request_info->uri, authorize_url) != 0);
}

static void *event_handler(enum mg_event event,
                           struct mg_connection *conn,
                           const struct mg_request_info *request_info) {
  void *processed = "yes";

  if (event == MG_NEW_REQUEST) {
    if (must_authorize(request_info) && !is_authorized(conn, request_info)) {
      redirect_to_login(conn, request_info);
    } else if (strcmp(request_info->uri, authorize_url) == 0) {
      authorize(conn, request_info);
    } else if (strcmp(request_info->uri, "/ajax/get_messages") == 0) {
      ajax_get_messages(conn, request_info);
    } else if (strcmp(request_info->uri, "/ajax/send_message") == 0) {
      ajax_send_message(conn, request_info);
    } else {
      // No suitable handler found, mark as not processed. Mongoose will
      // try to serve the request.
      processed = NULL;
    }
  } else {
    processed = NULL;
  }

  return processed;
}

static const char *options[] = {
  "document_root", "html",
  "listening_ports", "8081,8082s",
  "ssl_certificate", "ssl_cert.pem",
  "num_threads", "5",
  NULL
};

int main(void) {
  struct mg_context *ctx;

  // Initialize random number generator. It will be used later on for
  // the session identifier creation.
  srand((unsigned) time(0));

  // Setup and start Mongoose
  ctx = mg_start(&event_handler, options);
  assert(ctx != NULL);

  // Wait until enter is pressed, then exit
  printf("Chat server started on ports %s, press enter to quit.\n",
         mg_get_option(ctx, "listening_ports"));
  getchar();
  mg_stop(ctx);
  printf("%s\n", "Chat server stopped.");

  return EXIT_SUCCESS;
}

// vim:ts=2:sw=2:et

#endif


