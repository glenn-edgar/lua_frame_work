/*
**
** Copyright 2008 Onyx Engineering
** This file is licensed MIT
** File: lua_serial.c
** Adds low level linux serial support to lua
**
**
**
**
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <assert.h>
#include "cf_controller_rs485.h"

static void setBaudRate( int handle, int speed );
static void computeCheckSum( char *checkSum, char *message, int size);

static char tx_buffer[4096];
static int  handle =  -1;

static int lua_rsRawRead( lua_State *L )
{

  char   string[256];
  int    size;

 
  
  assert( handle > 0);
    
  memset( string,0,sizeof(string ));
  
  size = read( handle, string, 255 );
  

  lua_pushinteger( L, size );
  if( size > 0 )
  {
    lua_pushlstring(  L,  string, size );
  }
  else
  {
     lua_pushnil(L );
  }
  return 2;
}  


static int lua_rsWrite( lua_State *L )
{

  char      *string;
  size_t    size;
  char      checkSum[3];

  assert(handle > 0 );
 
  string = (char *)lua_tolstring(L, 1, &size);
  computeCheckSum(checkSum,string,size);
  strcpy(tx_buffer,string);
  strcat(tx_buffer,checkSum);
  write( handle, tx_buffer, size+2);
  
  return 0;
}



typedef enum
{
  LOOKING_FOR_HEADER          = 0,
  BUILDING_MESSAGE            = 1,
  LOOKING_FOR_CHECK_SUM_1     = 2,
  LOOKING_FOR_CHECK_SUM_2     = 3,
}RS485_RX_STATES;


static unsigned int  rd_state = LOOKING_FOR_HEADER;
static unsigned int  rd_index;
static unsigned int  checkSum;
static unsigned int  checkSum_m;
static unsigned int  delimeter_count;
static char unsigned rd_messageBuffer[ 4096];

static int lua_rsGetMessage ( lua_State *L )
{
   int returnValue;
   int loopFlag;
   int size;
   unsigned char temp[2];
   
   returnValue = 0;


  
   loopFlag = 1;
   delimeter_count = 0;
   while( loopFlag != 0)
   {
     size = read( handle, &temp, 1 );
     if( rd_index >= sizeof(rd_messageBuffer))
     {
       rd_state = LOOKING_FOR_HEADER;
     }
     //printf(" data %d  state %d del cnt %d \r\n",temp[0], rd_state, delimeter_count);
     
     if( size > 0 )
     {
        switch( rd_state )
        {
           case LOOKING_FOR_HEADER:
            if( temp[0] == '{' )
            { 
	       checkSum = temp[0]; 
               checkSum &= 0xffff;

	       rd_index = 0;
	       delimeter_count = 1;
               rd_state = BUILDING_MESSAGE;
	       rd_messageBuffer[rd_index] = temp[0];
	       rd_index +=1;
	       
            }
            else
            { 
               ; // stay in looking for header state
            }
            break;

             

          case  BUILDING_MESSAGE:
               rd_messageBuffer[ rd_index ] = temp[0];
               checkSum += temp[0]; 
               checkSum &= 0xffff;
	       rd_index += 1;
               switch( temp[0])
	       {
		 case '{':
		    delimeter_count += 1;
		    break;
		 case '}':
		    delimeter_count -= 1;
		    break;
	       }
	       if( delimeter_count == 0)
	       {
		 rd_state = LOOKING_FOR_CHECK_SUM_1;
	       }	 
               break;

        case  LOOKING_FOR_CHECK_SUM_1:
             checkSum_m = temp[0];
             checkSum_m &= 0xff;
	     rd_state = LOOKING_FOR_CHECK_SUM_2;
	     break;
	     
	case  LOOKING_FOR_CHECK_SUM_2:
             checkSum_m |= ((temp[0]<<8)&0xff00);
             lua_pushinteger(L,checkSum);
	     lua_pushinteger(L,checkSum_m);
             lua_pushlstring(L,(char*) rd_messageBuffer,(unsigned) rd_index );
             returnValue = 3;
             rd_state = LOOKING_FOR_HEADER;
             goto exit;
             break;

         }
   
    }
    else
    {
       loopFlag = 0;
    }


   }
exit:
   return returnValue;
}


static int  lua_rsOpen( lua_State *L )
{
   
   char *device;

   int  speed;

    rd_state = LOOKING_FOR_HEADER;

   device = (char *)lua_tostring(L,1);
   speed  = lua_tointeger( L, 2 );
   handle = open(device, O_RDWR | O_NONBLOCK );
   if( handle > 0 )
   {
      setBaudRate( handle , speed );
      lua_pushboolean(L,1);
   }
   else
   {
     lua_pushboolean(L,0);
   }
   return 1;
}

static int lua_rsClose( lua_State *L )
{
  int handle;

  rd_state = LOOKING_FOR_HEADER;
 
 
  close(handle);

  handle = -1;
  return 0;
}




static int lua_rsHelp( lua_State *L )
{
  printf("list of low level rs commands commands \r\n\r\n");
  printf("rs485.open(device,speed) -- opens serial port \r\n");
  printf("    --- where 0 = 9600              \n");
  printf("    --- where 1 = 19200             \n");
  printf("    --- where 2 = 38K               \n");
  printf("    --- where 3 = 56K               \n");
  printf("    --- where 4 = 115K              \n");
  printf("rs485.close()             -- closes serial port \n");
  printf("rs485.rawRead()                 \n");
  printf("  -- returns size string            \n"); 
  printf("rs485.getMessage( ) \n");
  printf("rs485.write(handle,string)        \n");
  printf("  -- builds and writes API packet \n");
  printf("rs485.help()                    -- dumps out commands \n");
  return 0;
}   


static int lua_description( lua_State *L )
{
  
   lua_pushstring(L,"RS485 Interface");
   return 1;
}







static const struct luaL_reg  lua_zigbee[] = 
{
   {"description",       lua_description},
   {"open",              lua_rsOpen   },
   {"close",             lua_rsClose  },
   {"rawRead",           lua_rsRawRead   },
   {"write",             lua_rsWrite  },
   {"getMessage",        lua_rsGetMessage },
   {"help",              lua_rsHelp   }, 
   { NULL, NULL },      
   
};


int lua_cf_controller_rs485_load( lua_State *L )
{
   


   luaL_openlib(L,"rs485",lua_zigbee,0 );
   return 1;
}

/*
**
** Static Support Functions
**
**
*/

static void setBaudRate( int handle, int speed )
{
 struct termios reading;

  

  tcgetattr( handle,&reading);
  switch( speed)
  {
    case 0:
      cfsetispeed( &reading, B9600);
      cfsetospeed( &reading, B9600);
      break;

    case 1:
      cfsetispeed( &reading, B19200);
      cfsetospeed( &reading, B19200);
      break;

    case 2:
      cfsetispeed( &reading, B38400);
      cfsetospeed( &reading, B38400);
      break;

    case 3:
      cfsetispeed( &reading, B57600);
      cfsetospeed( &reading, B57600);
      break;

    case 4:
      cfsetispeed( &reading, B115200);
      cfsetospeed( &reading, B115200);
      break;
   }
  reading.c_cflag |=  CREAD;
  reading.c_cc[VMIN]=1;
  reading.c_cc[VTIME]=0;
  reading.c_lflag &= ~ICANON;        /* unbuffered input */
  reading.c_iflag = IGNPAR;
  reading.c_oflag = 0;

  tcsetattr( handle,TCSANOW,&reading);

 
}

static void computeCheckSum( char *checkSum, char *message, int size)
{
  int temp;
  int i;
  
  temp = 0;
  for( i=0;i<size;i++)
  { 
    temp += *message;
    temp &= 0xffff;
    message++;
  }
  *checkSum++ = temp & 0xff;
  *checkSum++ = (temp>> 8)& 0xff;
 
}

