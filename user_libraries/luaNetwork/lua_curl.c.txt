/*
**
** File: lua_curl.c
**
**
**
*/

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <curl/curl.h>
#include <assert.h>

#include "lua.h"
#include "lualib.h"
#include "lauxlib.h"




#include "lua_curl.h"

static int ftp_put( char *buffer, char *localFile );
static int ftp_get( char *url, char *localFile);


static char *returnPtr;
static char returnBuffer[ 100000 ];

static size_t defaultWrite( void *ptr, size_t size, size_t nmemb, void *stream)
{
   int returnValue;
   returnValue = size * nmemb;
   memcpy( returnPtr, ptr, returnValue );
   returnPtr += returnValue;
   return returnValue;
}



static int lua_curlGet( lua_State *L )
{

   CURL      *curl;
   CURLcode  res;

   char      *url;
   
   returnPtr = returnBuffer;
   url       = (char *) lua_tostring(L,1);
    
   memset( returnBuffer, 0, sizeof( returnBuffer ));
   curl = curl_easy_init();
   assert( curl != NULL );
   curl_easy_setopt(curl, 
                    CURLOPT_URL, 
                    url );
   curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION,  defaultWrite);
   res = curl_easy_perform(curl);
   curl_easy_cleanup(curl);
   lua_pushinteger(L,res);
   lua_pushstring(L,returnBuffer);
   return 2;

}

static int lua_curlPost( lua_State *L )
{
   CURL      *curl;
   CURLcode  res;
   char      *url;
   char      *postData;

   url      = (char *)lua_tostring(L,1 );
   postData = (char *)lua_tostring(L,2);

   curl = curl_easy_init();
   assert( curl != NULL );
 
   curl_easy_setopt(curl, CURLOPT_URL, url );
   curl_easy_setopt(curl, 
                   CURLOPT_POSTFIELDS,
                   curl_easy_escape( curl , postData,strlen(postData) ));   
   res = curl_easy_perform(curl);
   curl_easy_cleanup(curl);
   lua_pushinteger(L, res );
   return 1;
 }

static int lua_curlFtpPut( lua_State *L)
{
   char *userName;
   char *password;
   char *url;
   char *localFile;
   char *remoteFile;
   int  status;
   char *buffer;

   buffer = malloc( 256);
   assert( buffer != NULL);

   userName = (char *)lua_tostring(L,1);
   password = (char *)lua_tostring(L,2);
   url      = (char *)lua_tostring(L,3);
   localFile = (char *)lua_tostring(L,4);
   remoteFile = (char *)lua_tostring(L,5);
   // ftp://login:password@host/file
   strcpy(buffer,"ftp://");
   strcat(buffer,userName);
   strcat(buffer,":");
   strcat(buffer,password);
   strcat(buffer,"@");
   strcat(buffer,url);
   strcat(buffer,"/");
   strcat(buffer,remoteFile);
   status = ftp_put( buffer, localFile );
   lua_pushinteger(L,status);
   return 1;
}

static int lua_curlFtpGet( lua_State *L )
{
   char *userName;
   char *password;
   char *url;
   char *localFile;
   char *remoteFile;
   int  status;
   char *buffer;

   buffer = malloc( 256);
   assert( buffer != NULL);

   userName = (char *)lua_tostring(L,1);
   password = (char *)lua_tostring(L,2);
   url      = (char *)lua_tostring(L,3);
   localFile = (char *)lua_tostring(L,4);
   remoteFile = (char *)lua_tostring(L,5);
   // ftp://login:password@host/file
   strcpy(buffer,"ftp://");
   strcat(buffer,userName);
   strcat(buffer,":");
   strcat(buffer,password);
   strcat(buffer,"@");
   strcat(buffer,url);
   strcat(buffer,"/");
   strcat(buffer,remoteFile);
   status = ftp_get( buffer, localFile );
   free( buffer);
   lua_pushinteger(L,status);
   return 1;
}


static int description( lua_State *L )
{
  lua_pushstring(L,"libcurl interface");
  return 1;
}

static int lua_curlHelp( lua_State *L )
{
   printf("curl.ftpPut( userName,password, url, localFile, remoteFile) \r\n"); 
   printf("curl.ftpGet( userName,password, url, localFile, remoteFile) \r\n");
   printf("curl.get( url) -- function needs more tweeking              \r\n");
   printf("curl.post( url, stringPostFields ) -- table is the pairs    \r\n");
   printf("curl.help() -- displays commands                            \r\n");
   return 0;
}

static const struct luaL_reg  lua_curl[] = 
{
   {"description",    description   },
   {"ftpPut",         lua_curlFtpPut },
   {"ftpGet",         lua_curlFtpGet },
   {"get",            lua_curlGet   },
   {"post",          lua_curlPost  },
   {"help",           lua_curlHelp   }, 
   { NULL, NULL },      
   
};



int lua_curl_load( lua_State * L )
{
   


   luaL_openlib(L,"curl",lua_curl,0 );
   return 1;
}

/*
**
**
**
** Static support routines
**
**
**
*/

/*
**
**
**  The get operation taken from
**  http://curl.haxx.se/lxr/source/docs/examples/ftpget.c
**
**
**
**
**
*/


struct FtpFile 
{
   char *filename;
    FILE *stream;
};
  
static size_t my_fwrite(void *buffer, size_t size, size_t nmemb, void *stream)
{
  struct FtpFile *out=(struct FtpFile *)stream;
  if(out && !out->stream) 
   {
      /* open file for writing */
      out->stream=fopen(out->filename, "wb");
      if(!out->stream)
      {
       return -1; /* failure, can't open file to write */
      }
   }
   return fwrite(buffer, size, nmemb, out->stream);
} 

static int ftp_get( char *url, char *localFile)
 {
 
   CURL *curl;
   CURLcode res;
   struct FtpFile ftpfile;

   ftpfile.stream     = NULL;
   ftpfile.filename   = localFile;
   curl_global_init(CURL_GLOBAL_DEFAULT);
 
   curl = curl_easy_init();
   if(curl) 
   {
     curl_easy_setopt(curl, CURLOPT_URL, url );

   /* Define our callback to get called when there's data to be written */
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, my_fwrite);
    /* Set a pointer to our struct to pass to the callback */
     curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ftpfile);
 
     /* Switch on full protocol/debug output */
     curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);
 
    res = curl_easy_perform(curl);
 
     /* always cleanup */
     curl_easy_cleanup(curl);

   }
    if(ftpfile.stream)
    {
        fclose(ftpfile.stream); /* close the local file */
    }
    curl_global_cleanup(); 
   return 0;
 }
 
/*
**
**
** ftp put operation
**
**
**
**
**
*/

static size_t read_callback(void *ptr, size_t size, size_t nmemb, void *stream)
 {
    /* in real-world cases, this would probably get this data differently
       as this fread() stuff is exactly what the library already would do
       by default internally */
    size_t retcode = fread(ptr, size, nmemb, stream);
    return retcode;

}


static int ftp_put( char *buffer, char *localFile )
{

    CURL *curl;
    CURLcode res;
    FILE *hd_src;

 
  
    res = 0;
    /* get a FILE * of the same file */
    hd_src = fopen( localFile, "rb"); 
    if( hd_src == NULL )
    {
      return -1;
    }

   curl_global_init(CURL_GLOBAL_DEFAULT);
 
   curl = curl_easy_init();
   if(curl) 
   {/* enable uploading */

     curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);

     curl_easy_setopt(curl, CURLOPT_URL, buffer );

   /* Define our callback to get called when there's data to be written */
    curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_callback);
    /* Set a pointer to our struct to pass to the callback */
     curl_easy_setopt(curl, CURLOPT_READDATA, hd_src);;
 
     /* Switch on full protocol/debug output */
     curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);
 
    res = curl_easy_perform(curl);
 
     /* always cleanup */
     curl_easy_cleanup(curl);

   }
   fclose(hd_src); /* close the local file */
 
   curl_global_cleanup();
   return res;
}
 
