/*
**
** File: lua_couchdb.c
** Lua interface to couchdb functions
**
**
**
**
**
**
**
*/

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <time.h>
#include <sys/time.h>
#include <dlfcn.h>

#include "lauxlib.h"
#include "lualib.h"
#include "lua.h"

#include <curl/curl.h>
#include <curl/types.h>
#include <curl/easy.h>
extern void lua_dobuffer( lua_State * L, const char *buffer, int size, char *file );


/*
**
** These are private functions within the lua couchdb package
**
**
**
**
*/

/* Structs */
struct memory_chunk {
  char *memory;
  char *offset;
  size_t size;
};


typedef enum {PT_MAP,PT_ARRAY,PT_NULL, PT_BOOLEAN, PT_INTEGER, PT_DOUBLE, PT_STRING, PT_KEY_VALUE} pt_type_t;

typedef struct {
  pt_type_t type;
} pt_node_t;

typedef struct 
{
 
  long response_code;
  char* raw_json;
  int raw_json_len;
} pt_response_t;

static pt_response_t* pt_post_header( const char *server_target, char *header, char *data, unsigned data_len );
static pt_response_t* pt_copy_header( const char *server_target, char *header, char *data, unsigned data_len );
static pt_response_t* pt_post( const char *server_target, char *data, unsigned data_len );
static pt_response_t* pt_delete(const char* server_target);
static pt_response_t* pt_put(const char* server_target, char *data, unsigned data_len);
static pt_response_t* pt_get(const char* server_target);


static void free_res( pt_response_t *res)
{
   if( res->raw_json_len > 0 )
   {
     free( res->raw_json );
   }
   if( res != NULL )
   {
     free(res);
   }
}

static int lua_copy_header( lua_State *L )
{
  pt_response_t *res;
  size_t        data_length;
  const char    *server_target;
  const char    *data;
  const char    *header;

  server_target = lua_tostring( L, 1);
  header        = lua_tostring( L, 2 );
  data = lua_tolstring (L,3, &data_length);
  res = pt_copy_header( server_target, (char *)header, (char*)data, data_length );
  lua_pushinteger(L,res->response_code);
  if( res->raw_json_len > 0 )
  {
    lua_pushlstring(L,res->raw_json,res->raw_json_len );
    free_res(res);
    return 2;
  }
  else
  {
    free_res(res);
    return 1;
  }
  return 2; // doesnot execute
}




static int lua_put( lua_State *L )
{
  pt_response_t *res;
  size_t        data_length;
  const char    *server_target;
  const char    *data;

  server_target = lua_tostring( L, 1);
  data = lua_tolstring (L,2, &data_length);
  res = pt_put( server_target, (char*)data, data_length );
  lua_pushinteger(L,res->response_code);
  if( res->raw_json_len > 0 )
  {
    lua_pushlstring(L,res->raw_json,res->raw_json_len );
    free_res(res);
    return 2;
  }
  else
  {
    free_res(res);
    return 1;
  }
  return 2; // doesnot execute
}

static int lua_post( lua_State *L )
{
  pt_response_t *res;
  size_t        data_length;
  const char    *server_target;
  const char    *data;

  server_target = lua_tostring( L, 1);
  data = lua_tolstring (L,2, &data_length);
  res = pt_post( server_target, (char*)data, data_length );
  lua_pushinteger(L,res->response_code);
  if( res->raw_json_len > 0 )
  {
    lua_pushlstring(L,res->raw_json,res->raw_json_len );
    free_res(res);
    return 2;
  }
  else
  {
    free_res(res);
    return 1;
  }
  return 2; // doesnot execute
}


static int lua_post_header( lua_State *L )
{
  pt_response_t *res;
  size_t        data_length;
  const char    *header;
  const char    *server_target;
  const char    *data;

  server_target = lua_tostring( L, 1);
  header = lua_tostring(L,2);
  data = lua_tolstring (L,3, &data_length);

  res = pt_post_header( server_target, (char *)header, (char*)data, data_length );
  lua_pushinteger(L,res->response_code);
  if( res->raw_json_len > 0 )
  {
    lua_pushlstring(L,res->raw_json,res->raw_json_len );
    free_res(res);
    return 2;
  }
  else
  {
    free_res(res);
    return 1;
  }
  return 2; // doesnot execute
}




static int lua_delete( lua_State *L )
{
  pt_response_t *res;

  const char    *server_target;
 

  server_target = lua_tostring( L, 1);
  
  res = pt_delete( server_target );
  lua_pushinteger(L,res->response_code);
  
   if( res->raw_json_len > 0 )
  {
    lua_pushlstring(L,res->raw_json,res->raw_json_len );
    free_res(res);
    return 2;
  }
  else
  {
    free_res(res);
    return 1;
  }
  return 2; // doesnot execute
}




static int lua_get( lua_State *L)
{
  pt_response_t *res;
  const char    *server_target;
 

  server_target = lua_tostring( L, 1);
  
  res = pt_get( server_target );
  lua_pushinteger(L,res->response_code);
  if( res->raw_json_len > 0 )
  {
    lua_pushlstring(L,res->raw_json,res->raw_json_len );
    free_res(res);
    return 2;
  }
  else
  {
    free_res(res);
    return 1;
  }
  return 2; // doesnot execute
}





static int lua_description( lua_State *L)
{
  lua_pushstring(L,"interfaces with couchdb");
  return 1;
}

static const struct luaL_reg  lua_couchBuffer[] = 
{
   {"description",    lua_description     },
   {"put",            lua_put             },
   {"post_headers",   lua_post_header   },
   {"get",            lua_get             },
   {"post",           lua_post           },
   {"delete",         lua_delete          },
   {"copy",           lua_copy_header     },   
   { NULL, NULL },      
   
};

static int lua_loadScript(lua_State *L)
{
  


  #include "init.h"

  return 0;
}





int lua_loadcouchdb( lua_State *L )
{
   
   luaL_openlib(L,"couchdb",lua_couchBuffer,0 );
   lua_loadScript( L );
   return 1;
}

/*
**
** Static support functions
**
**
**
**
*/



static pt_response_t* http_operation(const char* http_method, const char* server_target, const char* data, unsigned data_len);
static pt_response_t* http_operation_header(const char *http_method, const char * server_target, const char *header, const char *data, unsigned data_len);


static pt_response_t* pt_post_header( const char *server_target, char *header, char *data, unsigned data_len )
{
  pt_response_t* res = http_operation_header("POST",server_target,header,data,data_len);
  return res;
}

static pt_response_t* pt_copy_header( const char *server_target, char *header, char *data, unsigned data_len )
{
  pt_response_t* res = http_operation_header("COPY",server_target,header,data,data_len);
  return res;
}



static pt_response_t* pt_delete(const char* server_target)
{
  pt_response_t* res = http_operation("DELETE",server_target,NULL,0);
  return res;
}

static pt_response_t* pt_put(const char* server_target, char *data, unsigned data_len)
{
  
  pt_response_t* res = http_operation("PUT",server_target,data,data_len);
  return res;
}


static pt_response_t* pt_post(const char* server_target, char *data, unsigned data_len)
{
  
  pt_response_t* res = http_operation("POST",server_target,data,data_len);
  return res;
}

static pt_response_t* pt_get(const char* server_target)
{
 
  pt_response_t* res = http_operation("GET",server_target,NULL,0);
  return res;
}


static void *myrealloc(void *ptr, size_t size)
{
  /* There might be a realloc() out there that doesn't like reallocing
     NULL pointers, so we take care of it here */
  if(ptr)
    return (void*) realloc(ptr, size);
  else
    return (void*) malloc(size);
}

static size_t recv_memory_callback(void *ptr, size_t size, size_t nmemb, void *data)
{
  size_t realsize = size * nmemb;
  struct memory_chunk *mem = (struct memory_chunk*)data;

  mem->memory = (char*) myrealloc(mem->memory, mem->size + realsize + 1);
  if (mem->memory) {
    memcpy(&(mem->memory[mem->size]), ptr, realsize);
    mem->size += realsize;
    mem->memory[mem->size] = 0;
  }
  return realsize;
}

static size_t send_memory_callback(void *ptr, size_t size, size_t nmemb, void *data)
{
  size_t realsize = size * nmemb;
  
  if(realsize < 1)
    return 0;
 
  struct memory_chunk* mem = (struct memory_chunk*) data;
  
  if (mem->size > 0) {
    size_t bytes_to_copy = (mem->size > realsize) ? realsize : mem->size;
    memcpy(ptr,mem->offset,bytes_to_copy);
    mem->offset += bytes_to_copy;
    mem->size -= bytes_to_copy;
    return bytes_to_copy;
  }
  return 0;
}


    
static pt_response_t* http_operation(const char* http_method, const char* server_target, const char* data, unsigned data_len)
{

  CURL *curl_handle;
  CURLcode ret;
  struct memory_chunk recv_chunk;
 
  struct memory_chunk send_chunk;

  recv_chunk.memory=NULL; /* we expect realloc(NULL, size) to work */
  recv_chunk.size = 0;    /* no data at this point */

  send_chunk.memory = 0;
  send_chunk.offset = 0;
  send_chunk.size = 0;

  /* init the curl session */
  curl_handle = curl_easy_init();

  /* specify URL to get */
  curl_easy_setopt(curl_handle, CURLOPT_URL, server_target);

  curl_easy_setopt(curl_handle, CURLOPT_CONNECTTIMEOUT, 10);

  // Want to avoid CURL SIGNALS
  curl_easy_setopt(curl_handle, CURLOPT_NOSIGNAL, 1);

  

  if (!strcmp("PUT",http_method))
  {
    curl_easy_setopt(curl_handle, CURLOPT_UPLOAD, 1);
  }
  else
  {
    curl_easy_setopt(curl_handle, CURLOPT_CUSTOMREQUEST, http_method);
  }
  if (data && data_len > 0) 
  {
   
    send_chunk.memory = (char*) malloc(data_len);
    memcpy(send_chunk.memory,data,data_len);
    send_chunk.offset = send_chunk.memory;
    send_chunk.size = data_len;
    curl_easy_setopt(curl_handle, CURLOPT_READFUNCTION, send_memory_callback);
    curl_easy_setopt(curl_handle, CURLOPT_READDATA, (void*) &send_chunk);
  }

  /* send all data to this function  */
  curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, recv_memory_callback);

  /* we pass our 'chunk' struct to the callback function */
  curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&recv_chunk);

  /* some servers don't like requests that are made without a user-agent
     field, so we provide one */
  curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, "pillowtalk-agent/0.1");

  /* get it! */
  ret = curl_easy_perform(curl_handle);

  pt_response_t* res = calloc(1,sizeof(pt_response_t));
 
 if ((!ret)) 
  {
    ret = curl_easy_getinfo(curl_handle,CURLINFO_RESPONSE_CODE, &res->response_code);
    if (ret != CURLE_OK)
    {
      res->response_code = 500;
    }
    if (recv_chunk.size > 0) 
    {
      // Parse the JSON chunk returned
      recv_chunk.memory[recv_chunk.size] = '\0';
      res->raw_json = recv_chunk.memory;
      res->raw_json_len = recv_chunk.size;
    }
  } 
  else 
  {
    res->response_code = 500;
  }

  if (send_chunk.memory)
  {
    free(send_chunk.memory);
  }
  /* cleanup curl stuff */
  curl_easy_cleanup(curl_handle);

  return res;

}

static pt_response_t* http_operation_header(const char *http_method, const char * server_target, const char *header_data, const char *data, unsigned data_len)
{

  CURL *curl_handle;
  CURLcode ret;
  struct memory_chunk recv_chunk;
 
  struct memory_chunk send_chunk;
  struct curl_slist *headers=NULL;  

  recv_chunk.memory=NULL; /* we expect realloc(NULL, size) to work */
  recv_chunk.size = 0;    /* no data at this point */

  send_chunk.memory = 0;
  send_chunk.offset = 0;
  send_chunk.size = 0;

  /* init the curl session */
  curl_handle = curl_easy_init();



  headers = curl_slist_append(headers, header_data);

 

   

 

  /* specify URL to get */
  curl_easy_setopt(curl_handle, CURLOPT_URL, server_target);

  curl_easy_setopt(curl_handle, CURLOPT_CONNECTTIMEOUT, 10);

  // Want to avoid CURL SIGNALS
  curl_easy_setopt(curl_handle, CURLOPT_NOSIGNAL, 1);

  /* pass our list of custom made headers */  
  curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, headers);

  if (!strcmp("PUT",http_method))
  {
    curl_easy_setopt(curl_handle, CURLOPT_UPLOAD, 1);
  }
  else
  {
    curl_easy_setopt(curl_handle, CURLOPT_CUSTOMREQUEST, http_method);
  }
  if (data && data_len > 0) 
  {
    send_chunk.memory = (char*) malloc(data_len);
    memcpy(send_chunk.memory,data,data_len);
    send_chunk.offset = send_chunk.memory;
    send_chunk.size = data_len;
    curl_easy_setopt(curl_handle, CURLOPT_READFUNCTION, send_memory_callback);
    curl_easy_setopt(curl_handle, CURLOPT_READDATA, (void*) &send_chunk);
  }

  /* send all data to this function  */
  curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, recv_memory_callback);

  /* we pass our 'chunk' struct to the callback function */
  curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&recv_chunk);

  /* some servers don't like requests that are made without a user-agent
     field, so we provide one */
  curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, "pillowtalk-agent/0.1");

  /* get it! */
  ret = curl_easy_perform(curl_handle);

  pt_response_t* res = calloc(1,sizeof(pt_response_t));

 if ((!ret)) 
  {
    ret = curl_easy_getinfo(curl_handle,CURLINFO_RESPONSE_CODE, &res->response_code);
    if (ret != CURLE_OK)
    {
      res->response_code = 500;
    }
    if (recv_chunk.size > 0) 
    {
      // Parse the JSON chunk returned
      recv_chunk.memory[recv_chunk.size] = '\0';
      res->raw_json = recv_chunk.memory;
      res->raw_json_len = recv_chunk.size;
    }
  } 
  else 
  {
    res->response_code = 500;
  }

  if (send_chunk.memory)
  {
    free(send_chunk.memory);
  }
  curl_slist_free_all(headers); /* free the header list */ 
  /* cleanup curl stuff */
  curl_easy_cleanup(curl_handle);

  return res;

}

