/*
**  Copyright Onyx Engineering, INC
**  This file is licensed as MIT
**  File: constructState.c
**
**
**
*/

#include <unistd.h>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>


#include "lua.h"
#include "cs_private_heap.h"
#include "lua_private_heap.h"



extern int shell_load( lua_State * L );
extern void luaopen_lxp( lua_State * L );
extern int luaopen_luars232(lua_State *L);

void lua_dobuffer( lua_State * L, const char *buffer, int size, char *chunkName );

static int monitorBoxPanic( lua_State *L );


void constructLuaState( lua_State *L )
{
    int error;
#if USER_MEMORY_INCLUDE
    unsigned char *unCompressed;
    unsigned unCompressedSize;
#endif
    
    assert(L != NULL );

    luaL_openlibs(L);  /* open libraries */  
 
    lua_atpanic( L, monitorBoxPanic);

    shell_load( L );

    loadLuaUtilties( L );
    luaopen_luars232(L);


// load user defined lua scripts

#if  USER_MEMORY_INCLUDE     
    #include "start_up_scripts/init.h"

#else

   error = luaL_loadfile(L, "start_up_scripts/init.lua" );
    if( error == 0 )
    {
      error = lua_pcall(L, 0, LUA_MULTRET, 0);
    }
    if( error != 0 )
    {
       printf("Error --> %s \r\n",lua_tostring(L,-1));
       lua_pop(L,1);
    }

#endif

    error = luaL_loadfile(L, "init.lua" );
    if( error == 0 )
    {
      error = lua_pcall(L, 0, LUA_MULTRET, 0);
    }
    if( error != 0 )
    {
       printf("Error --> %s \r\n",lua_tostring(L,-1));
       lua_pop(L,1);
    }
}


/*
**
**  loads a buffer in memory
**
**
**
*/

void lua_dobuffer( lua_State * L, const char *buffer, int size, char *chunkName )
{
 
  int error;


  error =luaL_loadbuffer(L, buffer, size , chunkName); 
  if( error == 0 )
  {
     error = lua_pcall(L, 0, LUA_MULTRET, 0);
  }
  if( error != 0 )
  {

    printf("load include script load error --> %s \r\n",lua_tostring(L,-1));
    lua_pop(L,1);
  }


}


/*
**
** Error handler for unprotected call
**
**
*/
static int monitorBoxPanic( lua_State *L )
{
   printf("Lua Panic Error --> %s \r\n",lua_tostring(L,-1));
   return 0;
}

