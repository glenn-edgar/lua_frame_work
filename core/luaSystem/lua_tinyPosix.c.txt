/*
**
**  Copyright 2008 Onyx Engineering
** This file is licensed MIT
**
** File: lua_tinyPosix.c
** The purpose of this file is to implement
** a subset of the Posix functions
**
** Note this code was lifted directly from the lua 5.0
** library of lposix.c
**
*/

#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <grp.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/types.h>
#include <sys/utsname.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>
#include <utime.h>
#include <fcntl.h>

#include "lauxlib.h"
#include "lualib.h"
#include "lua.h"


extern FILE *lout;
extern FILE *lin;

#include "lua_tinyPosix.h"

#ifndef MYBUFSIZ
#define MYBUFSIZ 512
#endif

static int pusherror(lua_State *L, const char *info)
{
	lua_pushnil(L);
	if (info==NULL)
		lua_pushstring(L, strerror(errno));
	else
		lua_pushfstring(L, "%s: %s", info, strerror(errno));
	lua_pushnumber(L, errno);
	return 3;
}

static int pushresult(lua_State *L, int i, const char *info)
{
	if (i != -1)
	{
		lua_pushnumber(L, i);
		return 1;
	}
	else
		return pusherror(L, info);
}

int Pchdir(lua_State *L)			/** chdir(path) */
{
	const char *path = luaL_checkstring(L, 1);
	return pushresult(L, chdir(path), path);
}

int Pmkdir(lua_State *L)			/** mkdir(path) */
{
	const char *path = luaL_checkstring(L, 1);
	return pushresult(L, mkdir(path, 0777), path);
}


int Pdir(lua_State *L)			/** dir([path]) */
{
	const char *path = luaL_optstring(L, 1, ".");

	DIR *d = opendir(path);
	if (d == NULL)
        { 

	   return pusherror(L, path);
        }
	else
	{       

		int i;
		struct dirent *entry;
		lua_newtable(L);
		for (i=1; (entry = readdir(d)) != NULL; i++)
                {
                        lua_pushstring(L, entry->d_name);
	                lua_rawseti(L, -2, i);
                }
		closedir(d);
		return 1;
	}
        return 1; // remove warning
}

int Pgetcwd(lua_State *L)		/** getcwd() */
{
	char buf[MYBUFSIZ];
	if (getcwd(buf, sizeof(buf)) == NULL)
		return pusherror(L, ".");
	else
	{
		lua_pushstring(L, buf);
		return 1;
	}
        return 1;
}
