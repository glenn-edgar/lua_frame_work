/*
**
** Copyright 2008 Onyx Engineering
** This file is licensed MIT
**
** File: lua_stringExtend.c
** Lua interface to assert stack
**
**
**
**
**
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#include "lauxlib.h"
#include "lua_stringExtend.h"

static int l_replace(lua_State *L );
static int l_bsplit(lua_State *L );
static int l_ssplit(lua_State *L );
static int l_split(lua_State *L );
static int l_help( lua_State *L );
static int l_description( lua_State *L );


void extendStringPackage( lua_State *L )
{

   lua_getglobal( L, "string" );
   lua_pushstring(L ,"split");
   lua_pushcfunction( L, l_split );
   lua_settable(L, -3 );

   lua_pushstring(L ,"ssplit");
   lua_pushcfunction( L, l_ssplit );
   lua_settable(L, -3 );

   lua_pushstring(L ,"bsplit");
   lua_pushcfunction( L, l_bsplit );
   lua_settable(L, -3 );

   lua_pushstring(L ,"replace");
   lua_pushcfunction( L, l_replace );
   lua_settable(L, -3 );

   lua_pushstring(L ,"help");
   lua_pushcfunction( L, l_help );
   lua_settable(L, -3 );
   lua_pushstring(L ,"description");
   lua_pushcfunction( L, l_description );
   lua_settable(L, -3 );

   lua_pop(L, -1 );

}

/* code from chapter 27.2 of lua book */
static int l_split(lua_State *L )
{
   const char *s = luaL_checkstring(L,1);
   const char *sep = luaL_checkstring(L,2);
   const char *e;
   int         i = 1;

   lua_newtable(L);
   /* repeat for each separator */

   while (( e = strchr(s,*sep)) != NULL )
   {
     if( (e-s) == 0 )
     {
        ;
     }
     else
     {
         lua_pushlstring(L,s,e-s); /*push substring */
         lua_rawseti( L, -2, i++ );
       
     }
     s = e + 1;
   }
   /* push last substring */
   lua_pushstring( L, s );
   lua_rawseti( L, -2, i );
   return 1; /* return table */
}


static int l_ssplit(lua_State *L )
{
   const char *s = luaL_checkstring(L,1);
   const char *sep = luaL_checkstring(L,2);
   const char *e;
   int         i = 1;

   lua_newtable(L);
 
   while (( e = strstr(s,sep)) != NULL )
   {
     
     lua_pushlstring(L,s,e-s); 
     lua_rawseti( L, -2, i++ );
     s = e + strlen( sep );
   }
   /* push last substring */
   lua_pushstring( L, s );
   lua_rawseti( L, -2, i );
   return 1; /* return table */
}





static int l_bsplit(lua_State *L )
{
   const char *s = luaL_checkstring(L,1);
   const char *sep1 = luaL_checkstring(L,2);
   const char *sep2 = luaL_checkstring(L,3);
   const char *e;
   int         loopFlag;
   int         i = 1;

   loopFlag = 1;
   lua_newtable(L);
   /* repeat for each separator */
   while( loopFlag == 1)
   {
      e = strstr(s,sep1);
      if( e != NULL )
      {
         s = e+strlen( sep1 );
         e = strstr(s,sep2);
         if( e != NULL )
         {
           lua_pushlstring(L,s,e-s); /*push substring */
           lua_rawseti( L, -2, i++ );
         }
         else
         {
            loopFlag = 0;
         }
     }
     else
     {
        loopFlag = 0;
     } 

   }

   return 1; /* return table */
}


static int l_replace(lua_State *L )
{
   char *string;    
   char *checkChar;     
   char *replaceChar;  
   char *baseString;
   int  count;
   int  index;

   string        = (char *)luaL_checkstring(L,1);
   checkChar     = (char *)luaL_checkstring(L,2);
   replaceChar   = (char *)luaL_checkstring(L,3);
   baseString    = string;

   count = strlen( string);
   for( index = 0; index < count; index++)
   {
      if( *string == *checkChar )
      {
          *string = *replaceChar;
      }
      string++;
   }
   lua_pushstring(L,baseString);
   return 1;
}




static int l_help( lua_State *L )
{
  printf( "Commands for string library \r\n\r\n"); 
  printf( ".byte  string.byte(s) string.byte(s,3) \r\n"
         "   returns byte value of string   \r\n\r\n");
  printf(".char    string.char( 65,66,67) \r\n"
         " returns \"ABC\"    \r\n\r\n");
  printf(".dump  string.dump(function) \r\n  returns binary of function       \r\n\r\n");
  printf(".find   lua pattern matching function \r\n\r\n");
  printf(".format  string.format(<formatString>,a)"
         "   returns formated string   \r\n\r\n");
  printf(".gfind   lua pattern matching function \r\n\r\n");
  printf(".gmatch  lua pattern matching function \r\n\r\n");
  printf(".gsub    lua pattern matching function \r\n\r\n");
  printf(".len    string.len(x) \r\n"
         "    return length \r\n\r\n");
  printf(".lower  string.lower(x) " 
         " string to lower case \r\n\r\n");
  printf(".match   lua pattern matching function      \r\n\r\n");
  printf(".rep  string.rep(\"a\",20) \r\n"
         "   returns a string with \"a\" 20 times \r\n\r\n");
  printf(".reverse -- string.reverse(a) " 
         "    reverse string  \r\n\r\n");
  printf(".sub  string.sub( s, startIndex, endIndex)  \r\n"
         "   extracts string from start to end \r\n"); 
  printf(".upper   -- convert string to upper case \r\n\r\n");
  printf(".trim    string.trim(string) \r\n"
         "   trim front and back of string \r\n\r\n");
  printf(".split   string.split(\"a--b--c\",\"-\") \r\n" 
         " separates delimited text into table \r\n");
  printf(".ssplit  string.split(\"a-+b-+c\",\"-+\") \r\n" 
         " separtes delimited text by a string \r\n");
  printf(".bsplit  string.bsplite( str, '<?', '?>' ) \r\n");
  printf(".replace string.replace(string,refChar, replaceChar ) \r\n");
  return 0;
}

static int l_description( lua_State *L )
{
  lua_pushstring(L,"provides lua string functions support");
  return 1;
}